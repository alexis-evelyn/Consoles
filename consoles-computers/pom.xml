<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>consoles</artifactId>
        <groupId>ca.jarcode</groupId>
        <version>1.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>consoles-computers</artifactId>
    <version>${global.version}${global.version.suffix}</version>
    <description>Extension to consoles-core, adds programmable computers to a serve as a craftbukkit plugin.</description>
    
    <build>
        <resources>
            <!-- plugin YML files and default configs -->
            <resource>
                <directory>src/main/config</directory>
                <filtering>true</filtering>
            </resource>
            <!-- lua crap, mostly -->
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <!-- natives are compiled into libraries that should be located here -->
            <resource>
                <directory>${project.build.directory}/natives</directory>
            </resource>
        </resources>
        <sourceDirectory>src/main/java</sourceDirectory>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.5</version>
                <inherited>false</inherited>
            </plugin>

            <!--
            The native layer requires to be built against headers generated using javah. We use a small
            plugin for that. I don't like this plugin, because you have to list out every class.
            -->
            <plugin>
                <groupId>com.alexkasko.maven</groupId>
                <artifactId>jni-headers-maven-plugin</artifactId>
                <version>1.0.6</version>
                <executions>
                    <!-- generate header for native methods -->
                    <execution>
                        <id>javah-engine</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                        <configuration>
                            <javahVerbose>true</javahVerbose>
                            <javahClass>jni.LuaEngine</javahClass>
                            <javahOutputFilePath>${project.build.directory}/include/LuaEngine.h</javahOutputFilePath>
                        </configuration>
                    </execution>
                    <execution>
                        <id>javah-loader</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                        <configuration>
                            <javahVerbose>true</javahVerbose>
                            <javahClass>jni.LibLoader</javahClass>
                            <javahOutputFilePath>${project.build.directory}/include/LibLoader.h</javahOutputFilePath>
                        </configuration>
                    </execution>
                    <execution>
                        <id>javah-nvalue</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                        <configuration>
                            <javahVerbose>true</javahVerbose>
                            <javahClass>ca.jarcode.ascript.luanative.LuaNScriptValue</javahClass>
                            <javahOutputFilePath>${project.build.directory}/include/LuaNScriptValue.h</javahOutputFilePath>
                        </configuration>
                    </execution>
                    <execution>
                        <id>javah-nfunc</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                        <configuration>
                            <javahVerbose>true</javahVerbose>
                            <javahClass>ca.jarcode.ascript.luanative.LuaNScriptFunction</javahClass>
                            <javahOutputFilePath>${project.build.directory}/include/LuaNScriptFunction.h</javahOutputFilePath>
                        </configuration>
                    </execution>
                    <execution>
                        <id>javah-nvaluef</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                        <configuration>
                            <javahVerbose>true</javahVerbose>
                            <javahClass>ca.jarcode.ascript.luanative.LuaNValueFactory</javahClass>
                            <javahOutputFilePath>${project.build.directory}/include/LuaNValueFactory.h</javahOutputFilePath>
                        </configuration>
                    </execution>
                    <execution>
                        <id>javah-nfuncf</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                        <configuration>
                            <javahVerbose>true</javahVerbose>
                            <javahClass>ca.jarcode.ascript.luanative.LuaNFunctionFactory</javahClass>
                            <javahOutputFilePath>${project.build.directory}/include/LuaNFunctionFactory.h</javahOutputFilePath>
                        </configuration>
                    </execution>
                    <execution>
                        <id>javah-nthreadd</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                        <configuration>
                            <javahVerbose>true</javahVerbose>
                            <javahClass>ca.jarcode.ascript.luanative.LuaNThreadDatum</javahClass>
                            <javahOutputFilePath>${project.build.directory}/include/LuaNThreadDatum.h</javahOutputFilePath>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                I wrote a maven plugin for this project. Instead of working around the (terrible)
                abstractions that the maven NAR plugin provides, I just made a simple plugin that allows
                me to use a compiler with certain arguments, recursively against a source folder, and with
                certain compile targets.
            -->
            <plugin>
                <groupId>ca.jarcode</groupId>
                <artifactId>gcc-maven-plugin</artifactId>
                <version>1.11</version>
                <executions>
                    <execution>
                        <id>compile-library-linux</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <!-- Add ELF32 if you're on an ancient 32-bit system (w/ comma). -->
                            <targetPlatforms>ELF64</targetPlatforms>
                            <arguments><!-- -O2 --> -ggdb -Wall -pthread -D_REENTRANT -I${env.JAVA_HOME}/include -I${env.JAVA_HOME}/include/linux -Itarget/include -fPIC</arguments>
                        </configuration>
                    </execution>
                    <execution>
                      <id>link-library-linux</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>link</goal>
                        </goals>
                        <configuration>
                            <!--
                                We link directly against Lua 5.3, however, all lua 5.x versions
                                should work just fine if you're compiling manually (versions are
                                incompatible due to various symbol and API changes.)
                                
                                LuaJIT 2.x has a serious problem in that you cannot initialize
                                states with a custom allocator. This makes it impossible to properly
                                sandbox Lua code for Consoles. This problem is due to how the
                                VM uses 32-bit pointers for its garbage collector and needs to
                                allocate memory in the 32-bit range.
                                
                                If LuaJIT 3.x ever comes out, apparently it will have a new garbage
                                collector to solve this issue. Hopefully with that update, we can
                                have some method to limit memory usage for each state.
                            -->
                            <!-- Add ELF32 if you're on an ancient 32-bit system (w/ comma). -->
                            <targetPlatforms>ELF64</targetPlatforms>
                            <arguments>-l:liblua.so.5.3 -pthread -lffi -Wl,-z,defs</arguments>
                            <library>true</library>
                            <targetName>computerimpl</targetName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                The native layer for the Lua API <-> Java needs to pass various tests, this is because
                issues with JNI calls will not be checked on normal execution in the server, and will
                lead to obscure errors. Instead, we check it during the debug phase.
                
                Additonally, we run tests without a Spigot/Craftbukkit server instance. This makes
                debugging segfaults much easier since the JVM will be unlikely to throw bogus
                segfaults at us with its signal handling.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.9</version>
                <configuration>

                    <!-- Dump our test info to the console instead. -->
                    <useFile>false</useFile>

                    <!-- Handle assertion errors -->
                    <enableAssertions>true</enableAssertions>

                    <!-- Run in alphabetical order -->
                    <runOrder>alphabetical</runOrder>

                    <!--
                        Add -Xcheck:jni if your JVM does not spam your console for not checking
                        exceptions after every JNI call. The OpenJDK 8 VM does this, so unless
                        you are having issues due to bad JNI usage, do not use this flag to
                        prevent tons of spam on tests.
                        
                        (and there's nothing wrong with not checking exceptions in JNI code after
                        every call if you can safely assume it will not throw one)
                        
                        Putting LuaN in debug mode (via engine.h) is much better if you want to
                        debug JNI calls.
                    -->
                    <argLine></argLine>

                    <!-- Do not timeout -->
                    <forkedProcessTimeoutInSeconds>0</forkedProcessTimeoutInSeconds>

                    <!-- Pass through system propertery for debugging tests, use this for segfaults -->
                    <systemProperties>
                        <property>
                            <name>debugTests</name>
                            <value>${debugTests}</value>
                        </property>
                    </systemProperties>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <outputDirectory>${project.build.directory}/final</outputDirectory>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.7</version>
                <executions>
                    <execution>
                        <id>deploy-standard</id>
                        <goals>
                            <goal>deploy-file</goal>
                        </goals>
                        <configuration>
                            <file>${project.build.directory}/${project.artifactId}-${project.version}.jar</file>
                        </configuration>
                    </execution>
                    <execution>
                        <id>deploy-with-deps</id>
                        <goals>
                            <goal>deploy-file</goal>
                        </goals>
                        <configuration>
                            <file>${project.build.directory}/final/${project.artifactId}-${project.version}-jar-with-dependencies.jar</file>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>ca.jarcode</groupId>
            <artifactId>consoles-core</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>ca.jarcode</groupId>
            <artifactId>consoles-api</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>net.jodah</groupId>
            <artifactId>typetools</artifactId>
            <version>0.4.0</version>
        </dependency>
        <dependency>
            <groupId>org.luaj</groupId>
            <artifactId>luaj-jse</artifactId>
            <version>3.0</version>
        </dependency>
        <dependency>
            <groupId>org.spigotmc</groupId>
            <artifactId>spigot-api</artifactId>
            <version>${global.spigot.version}</version>
            <type>jar</type>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>ca.jarcode</groupId>
            <artifactId>consoles-nms-api</artifactId>
            <version>1.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- the NMS server has this packaged with it -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
